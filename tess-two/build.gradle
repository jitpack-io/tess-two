import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 22
        buildToolsVersion "23.0.1"

        defaultConfig {
            minSdkVersion 8
                targetSdkVersion 22
                versionCode 1
                versionName "1.0"
        }
    buildTypes {
        release {
            minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src']
                res.srcDirs = ['res']
                jniLibs.srcDirs = ['libs']
        }
    }

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir = file("${android.sdkDirectory}/ndk")
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('.').absolutePath
            } else {
                commandLine './ndk-build', '-C', file('.').absolutePath
            }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    // cleanup task
    task ndkClean(type: Exec) {
        workingDir = file("${android.sdkDirectory}/ndk")
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('.').absolutePath, 'clean'
            } else {
                commandLine './ndk-build', '-C', file('.').absolutePath, 'clean'
            }
    }

    tasks.withType(Delete) {
        cleanTask -> cleanTask.dependsOn ndkClean
    } 
}

tasks.whenTaskAdded { task ->
    if( task instanceof org.gradle.api.publish.maven.tasks.GenerateMavenPom ) {
        task.dependsOn assemble
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.1'
}
